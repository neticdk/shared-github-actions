# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json
---
name: Go Continuous Integration

on:
  workflow_call:
    secrets:
      # gh_username and gh_password are needed if `go get` (driven by
      # `GOPRIVATE`) needs to clone private GitHub repositories using HTTPS,
      # and the default `GITHUB_TOKEN` doesn't have sufficient permissions.
      gh_username:
        required: false
      gh_token:
        required: false
    inputs:
      go-version:
        description: "The version of Go to use"
        required: false
        type: string
      go-private:
        description: "The GOPRIVATE environment variable"
        required: false
        type: string
      run-benchmarks:
        description: "Run benchmarks"
        required: false
        default: false
        type: boolean
      run-release-test:
        description: "Run release dry-run using GoReleaser"
        required: false
        default: false
        type: boolean

jobs:
  tests:
    env:
      GOPRIVATE: "${{ inputs.go-private }}"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        if: inputs.go-version != ''
        uses: actions/setup-go@v5
        with:
          go-version: ${{ inputs.go-version }}

      - name: Setup Go
        if: inputs.go-version == ''
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod

      - name: Setup private repository access
        if: inputs.go-private != ''
        run: git config --global url."https://${{ secrets.gh_username }}:${{ secrets.gh_token }}@github.com".insteadOf "https://github.com"

      - name: Check go mod tidy
        run: |
          go mod tidy
          if git diff --exit-code go.mod go.sum; then
            echo "go.mod and go.sum are tidy."
          else
            echo "::error go.mod or go.sum are not tidy. Please run 'go mod tidy'."
            exit 1
          fi

      - name: Install Go dependencies
        run: |
          go mod download
          go mod verify

      - name: Cache golangci-lint
        id: cache-golangci-lint
        uses: actions/cache@v4
        with:
          path: .golangci-cache
          key: golangci-lint-${{ runner.os }}-${{ hashFiles('.golangci.yml') }}
          restore-keys: |
            golangci-lint-${{ runner.os }}-

      - name: golangci-lint
        uses: golangci/golangci-lint-action@v7
        with:
          version: v2.0
          # args: --cache-dir .golangci-cache

      # go test will compile the code, so we don't need to run go build
      - name: Go Compile and Test
        run: go test -cover -v ./...

      - name: Run benchmarks
        if: inputs.run-benchmarks
        run: go test -bench=./... ./...

      - name: Install GoReleaser
        uses: goreleaser/goreleaser-action@v6
        with:
          distribution: goreleaser
          version: "~> v2"
          install-only: true

      - name: Run GoReleaser healthcheck
        run: goreleaser healthcheck

      - name: Check GoReleaser config
        run: goreleaser check

      - name: Run GoReleaser dry-run
        if: inputs.run-release-test
        run: goreleaser release --snapshot --skip=publish --clean

  vuln-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.30.0
        with:
          scan-type: "fs"
          format: "table"
          exit-code: "1"
          ignore-unfixed: true
          vuln-type: "library"
