# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json
---
name: Go Continuous Integration

on:
  workflow_call:
    secrets:
      # gh_username and gh_password are needed if `go get` (driven by
      # `GOPRIVATE`) needs to clone private GitHub repositories using HTTPS,
      # and the default `GITHUB_TOKEN` doesn't have sufficient permissions.
      gh_username:
        required: false
      gh_token:
        required: false
      # satisfy actionlint
      GH_NETIC_ROBOT_CLASSIC_TOKEN:
        required: false
    inputs:
      go-version:
        description: "The version of Go to use"
        required: false
        type: string
      go-private:
        description: "The GOPRIVATE environment variable"
        required: false
        type: string
        default: github.com/containdk,github.com/neticdk,github.com/neticdk-k8s
      run-benchmarks:
        description: "Run benchmarks"
        required: false
        default: false
        type: boolean
      run-release-test:
        description: "Run release dry-run using GoReleaser"
        required: false
        default: false
        type: boolean
      run-govulncheck:
        description: "Run govulncheck"
        required: false
        default: true
        type: boolean
      govulncheck-fail:
        description: "Fail the workflow if govulncheck finds vulnerabilities"
        required: false
        default: true
        type: boolean
      run-trivy-scan:
        description: "Run Trivy vulnerability scanner"
        required: false
        default: true
        type: boolean
      run-coverage-report:
        description: "Run code coverage report"
        required: false
        default: false
        type: boolean


jobs:
  tests:
    name: Tests
    env:
      GOPRIVATE: "${{ inputs.go-private }}"
      GH_USERNAME: ${{ secrets.gh_username || 'gh-netic-robot' }}
      GH_TOKEN: ${{ secrets.gh_token || secrets.GH_NETIC_ROBOT_CLASSIC_TOKEN }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5

      - name: Setup Go
        uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5
        with:
          # go-version takes precedence over go-version-file
          # if it is empty, go-version-file will be used
          go-version: ${{ inputs.go-version }}
          go-version-file: go.mod

      - name: Setup private repository access
        id: setup_git_creds
        if: inputs.go-private != ''
        run: git config --global url."https://${{ env.GH_USERNAME }}:${{ env.GH_TOKEN }}@github.com".insteadOf "https://github.com"

      - name: Install Go dependencies
        run: |
          go mod download
          go mod verify

      - name: golangci-lint
        uses: golangci/golangci-lint-action@4afd733a84b1f43292c63897423277bb7f4313a9 # v8
        with:
          version: v2.4
          install-mode: "goinstall"

      - name: Go Compile and Test
        run: go test -cover -coverprofile=coverage.txt -v ./...

      - name: Archive code coverage results
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
        with:
          name: code-coverage
          path: coverage.txt

      - name: Run benchmarks
        if: inputs.run-benchmarks
        run: go test -bench=./... ./...

      - name: Install GoReleaser
        if: inputs.run-release-test
        uses: goreleaser/goreleaser-action@e435ccd777264be153ace6237001ef4d979d3a7a # v6
        with:
          distribution: goreleaser
          version: "~> v2"
          args: check

      - name: Clean up private repository access configuration
        if: always() && steps.setup_git_creds.outcome == 'success' && inputs.go-private != ''
        run: git config --global --unset url."https://${{ env.GH_USERNAME }}:${{ env.GH_TOKEN }}@github.com".insteadOf

  trivy-scan:
    name: Trivy Scan
    if: inputs.run-trivy-scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@b6643a29fecd7f34b3597bc6acb0a98b03d33ff8 # 0.33.1
        with:
          scan-type: "fs"
          format: "table"
          exit-code: "1"
          ignore-unfixed: true
          vuln-type: "library"

  govulncheck-scan:
    name: Govulncheck Scan
    if: inputs.run-govulncheck
    runs-on: ubuntu-latest
    env:
      GOPRIVATE: "${{ inputs.go-private }}"
      GH_USERNAME: ${{ secrets.gh_username || 'gh-netic-robot' }}
      GH_TOKEN: ${{ secrets.gh_token || secrets.GH_NETIC_ROBOT_CLASSIC_TOKEN }}
    steps:
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5

      - name: Setup Go
        uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5
        with:
          # go-version takes precedence over go-version-file
          # if it is empty, go-version-file will be used
          go-version: ${{ inputs.go-version }}
          go-version-file: go.mod

      - name: Setup private repository access
        id: setup_git_creds
        if: inputs.go-private != ''
        run: git config --global url."https://${{ env.GH_USERNAME }}:${{ env.GH_TOKEN }}@github.com".insteadOf "https://github.com"

      - name: Run govulncheck
        id: govulncheck
        run: |
          go install golang.org/x/vuln/cmd/govulncheck@latest
          if ! govulncheck -format text ./...; then
            if [[ "${{ inputs.govulncheck-fail }}" == "true" ]]; then
              echo "::error::govulncheck found vulnerabilities and is configured to fail the workflow."
              exit 1
            else
              echo "::warning::govulncheck found vulnerabilities but is configured to not fail the workflow."
            fi
          fi

      - name: Clean up private repository access configuration
        if: always() && steps.setup_git_creds.outcome == 'success' && inputs.go-private != ''
        run: git config --global --unset url."https://${{ env.GH_USERNAME }}:${{ env.GH_TOKEN }}@github.com".insteadOf

  code-coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && inputs.run-coverage-report
    needs: tests
    permissions:
      contents:      read
      actions:       read
      pull-requests: write
    steps:
      - uses: fgrosse/go-coverage-report@8c1d1a09864211d258937b1b1a5b849f7e4f2682 # v1
        with:
          coverage-artifact-name: code-coverage
          coverage-file-name: "coverage.txt"
